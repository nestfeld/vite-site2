import React, { useState, useEffect } from 'react';
import { useDecks } from "../../context/DeckContext";
import { collection, getDocs } from "firebase/firestore";
import { db } from "../../config/firebase-config";
import { useNavigate } from "react-router-dom"; // –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
import Arrow from './Arrow';
import "./StudySession.css";

const StudySession = ({ deckId }) => {
  const [cards, setCards] = useState([]);
  const { deckList } = useDecks();
  const deck = deckList.find((d) => d.id === deckId);
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [loading, setLoading] = useState(true);
  const [isWordNotHidden, setIsWordNotHidden] = useState(false);
  const navigate = useNavigate(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
  const fetchCards = async (deckId) => {
    setLoading(true);
    try {
      const querySnapshot = await getDocs(collection(db, "users", deck.owner, "decks", deckId, "cards"));
      const cardsList = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
      }));

      setCards(cardsList); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    } catch (error) {
      console.error('Error fetching cards:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (deckId) {
      fetchCards(deckId);
    }
  }, [deckId]);

  if (loading) {
    return <div className="load-div">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (cards.length === 0) {
    return (
    <div className='emptyDeck-block'>
      <h3>–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —ç—Ç–æ–π –∫–æ–ª–æ–¥–µ!</h3>
      <button onClick={() => navigate("/dictionary")}>–ù–∞–∑–∞–¥ –≤ —Å–ª–æ–≤–∞—Ä—å</button>
    </div>);
  }

  // –¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
  const currentCard = cards[currentCardIndex];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
  const handleNextCard = () => {
    if (currentCardIndex < cards.length) {
      setCurrentCardIndex(currentCardIndex + 1);
      setIsWordNotHidden(false);
    }
  };

  const handlePrevCard = () => {
    if (currentCardIndex > 0) {
      setCurrentCardIndex(currentCardIndex - 1);
      setIsWordNotHidden(false);
    }
  };

  return (
    <>
      <h3 className='sessionDeckName'>{deck ? deck.name : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–æ–¥–∞"}</h3>
      <div className='card-main-container' onClick={() => setIsWordNotHidden(!isWordNotHidden)} style={{cursor: "pointer"}}>
        {/* –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ */}
        {currentCardIndex >= cards.length ? (
          <div className="session-end-block">
            <button className='end-btn' onClick={() => navigate("/dictionary")}>–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–µ—Å—Å–∏—é <br /> üëç</button>
          </div>
        ) : (
          <>
            {/* <div className='cardSessionBlock--word'>
              {isWordNotHidden ? <p>{currentCard.translate}</p> : <h3>{currentCard.word}</h3>}
            </div> */}
            <div className="card-container">
              <div className={`thecard ${isWordNotHidden ? 'activecard' : ''}`}>
                <div className="thefront cardSessionBlock">{currentCard.word}</div>
                <div className="theback cardSessionBlock">{currentCard.translate}</div>
              </div>
            </div>
          </>
        )}
      </div>
      <div className='study-control'>
        <button onClick={handlePrevCard} disabled={currentCardIndex === 0}><Arrow isMirrored={true}/></button>
        
        <p>{currentCardIndex + 1} / {cards.length + 1}</p>
        <button onClick={handleNextCard}><Arrow /></button>
      </div>
    </>
  );
};

export default StudySession;
